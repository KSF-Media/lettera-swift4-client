//
// ArticlesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class ArticlesAPI {
    /**

     - parameter start: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter contentQuery: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func articleSearchGet(start: Int? = nil, limit: Int? = nil, contentQuery: String? = nil, completion: @escaping ((_ data: [Article]?,_ error: Error?) -> Void)) {
        articleSearchGetWithRequestBuilder(start: start, limit: limit, contentQuery: contentQuery).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /article/search
     - Search article by content. It's a freetext search, so the `contentQuery` may be whatever string or sentence to search for.
     - parameter start: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter contentQuery: (query)  (optional)
     - returns: RequestBuilder<[Article]> 
     */
    open class func articleSearchGetWithRequestBuilder(start: Int? = nil, limit: Int? = nil, contentQuery: String? = nil) -> RequestBuilder<[Article]> {
        let path = "/article/search"
        let URLString = letteraAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "contentQuery": contentQuery
        ])

        let requestBuilder: RequestBuilder<[Article]>.Type = letteraAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter uuid: (path)  
     - parameter authUser: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - parameter textonly: (query)  (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func articleUuidGet(uuid: UUID, authUser: UUID? = nil, authorization: String? = nil, textonly: Bool? = nil, completion: @escaping ((_ data: Article?,_ error: Error?) -> Void)) {
        articleUuidGetWithRequestBuilder(uuid: uuid, authUser: authUser, authorization: authorization, textonly: textonly).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     - GET /article/{uuid}
     - Fetch article by UUID.   Notes about the images:   The image URLs point to our image scaler, and are returned without no scaling parameters.  However, if wanted, `width` and `height` parameters can be added to the querystring of the URL.  Also in list views, to ensure same size, it might be useful to crop the images by using the parameter `function=hardcrop`
     - parameter uuid: (path)  
     - parameter authUser: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - parameter textonly: (query)  (optional, default to false)
     - returns: RequestBuilder<Article> 
     */
    open class func articleUuidGetWithRequestBuilder(uuid: UUID, authUser: UUID? = nil, authorization: String? = nil, textonly: Bool? = nil) -> RequestBuilder<Article> {
        var path = "/article/{uuid}"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let URLString = letteraAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "textonly": textonly
        ])
        let nillableHeaders: [String: Any?] = [
            "AuthUser": authUser,
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Article>.Type = letteraAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
