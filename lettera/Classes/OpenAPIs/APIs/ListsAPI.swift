//
// ListsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class ListsAPI {
    /**
     * enum for parameter category
     */
    public enum Category_frontpageGet: String {
        case framsidan = "Framsidan"
        case nyheter = "Nyheter"
        case ekonomi = "Ekonomi"
        case nordenOchVarlden = "NordenOchVarlden"
        case finland = "Finland"
        case klimatOchMiljo = "KlimatOchMiljo"
        case kultur = "Kultur"
        case litteratur = "Litteratur"
        case musik = "Musik"
        case scen = "Scen"
        case konst = "Konst"
        case filmOchTv = "FilmOchTv"
        case opinion = "Opinion"
        case ledare = "Ledare"
        case kolumner = "Kolumner"
        case debatt = "Debatt"
        case kronikor = "Kronikor"
        case sport = "Sport"
        case handboll = "Handboll"
        case fotboll = "Fotboll"
        case ishockey = "Ishockey"
        case motorsport = "Motorsport"
        case friidrott = "Friidrott"
        case skidsport = "Skidsport"
        case livsstil = "Livsstil"
        case medicinOchHalsa = "MedicinOchHalsa"
        case familjOchRelationer = "FamiljOchRelationer"
        case matOchDryck = "MatOchDryck"
        case resor = "Resor"
        case bilarOchFordon = "BilarOchFordon"
        case hemOchTradgard = "HemOchTradgard"
    }

    /**
     Returns a list for a front page
     
     - parameter start: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter category: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func frontpageGet(start: Int? = nil, limit: Int? = nil, category: Category_frontpageGet? = nil, completion: @escaping ((_ data: [ListArticle]?,_ error: Error?) -> Void)) {
        frontpageGetWithRequestBuilder(start: start, limit: limit, category: category).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Returns a list for a front page
     - GET /frontpage
     - parameter start: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter category: (query)  (optional)
     - returns: RequestBuilder<[ListArticle]> 
     */
    open class func frontpageGetWithRequestBuilder(start: Int? = nil, limit: Int? = nil, category: Category_frontpageGet? = nil) -> RequestBuilder<[ListArticle]> {
        let path = "/frontpage"
        let URLString = letteraAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "category": category?.rawValue
        ])

        let requestBuilder: RequestBuilder<[ListArticle]>.Type = letteraAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns a list of latest articles
     
     - parameter start: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func latestGet(start: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [ListArticle]?,_ error: Error?) -> Void)) {
        latestGetWithRequestBuilder(start: start, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Returns a list of latest articles
     - GET /latest
     - parameter start: (query)  (optional)
     - parameter limit: (query)  (optional)
     - returns: RequestBuilder<[ListArticle]> 
     */
    open class func latestGetWithRequestBuilder(start: Int? = nil, limit: Int? = nil) -> RequestBuilder<[ListArticle]> {
        let path = "/latest"
        let URLString = letteraAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ListArticle]>.Type = letteraAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns a list of most read articles
     
     - parameter start: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mostreadGet(start: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: [ListArticle]?,_ error: Error?) -> Void)) {
        mostreadGetWithRequestBuilder(start: start, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Returns a list of most read articles
     - GET /mostread
     - parameter start: (query)  (optional)
     - parameter limit: (query)  (optional)
     - returns: RequestBuilder<[ListArticle]> 
     */
    open class func mostreadGetWithRequestBuilder(start: Int? = nil, limit: Int? = nil) -> RequestBuilder<[ListArticle]> {
        let path = "/mostread"
        let URLString = letteraAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[ListArticle]>.Type = letteraAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
